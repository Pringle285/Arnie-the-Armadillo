
#include <math_constants>

#define SPHERE_VERTEX_COUNT(MERIDIANS, PARALLELS) (6*(MERIDIANS)*(PARALLELS))

template <MERIDIANS, PARALLELS>
glsl vec3 sphereCoord(int i) {
    int face = i/6;
    int parallel = face/int(MERIDIANS) + (i+1)%6/3;
    int meridian = face%int(MERIDIANS) + (i+2)%6/3;
    float hAngle = TAU*float(meridian)/float(MERIDIANS);
    float vAngle = 0.5*TAU*(float(parallel)/float(PARALLELS));
    return vec3(sin(hAngle)*sin(vAngle), -cos(hAngle)*sin(vAngle), -cos(vAngle));
}

template <MERIDIANS, PARALLELS>
glsl vec3 sphereNormal(int i) {
    return sphereCoord<MERIDIANS, PARALLELS>(i);
}

template <MERIDIANS, PARALLELS>
glsl vec2 sphereTexCoord(int i) {
    int face = i/6;
    int parallel = face/int(MERIDIANS) + (i+1)%6/3;
    int meridian = face%int(MERIDIANS) + (i+2)%6/3;
    return vec2(float(meridian)/float(MERIDIANS), float(parallel)/float(PARALLELS));
}

template <MERIDIANS, PARALLELS>
glsl mat3 sphereTangentSpace(int i) {
    int face = i/6;
    int parallel = face/int(MERIDIANS) + (i+1)%6/3;
    int meridian = face%int(MERIDIANS) + (i+2)%6/3;
    float hAngle = TAU*float(meridian)/float(MERIDIANS);
    float vAngle = 0.5*TAU*(float(parallel)/float(PARALLELS));
    mat3 tangentSpace;
    tangentSpace[0] = vec3(cos(hAngle), sin(hAngle), 0.0);
    tangentSpace[2] = vec3(sin(hAngle)*sin(vAngle), -cos(hAngle)*sin(vAngle), -cos(vAngle));
    tangentSpace[1] = cross(tangentSpace[0], tangentSpace[2]);
    return tangentSpace;
}

template <MERIDIANS, PARALLELS>
glsl vec4 sphereVertex(int i) {
    return vec4(sphereCoord<MERIDIANS, PARALLELS>(i), 1.0);
}
